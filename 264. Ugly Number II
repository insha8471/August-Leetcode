Time complexity : O(nlog(n))

public int isUgly(int num, int d){

        while(num % d == 0){
            num /= d;
        }
        return num;
    }
    public boolean check(int num) {
        num = isUgly(num, 2);
        num = isUgly(num, 3);
        num = isUgly(num, 5);

        return num==1 ? true : false;
    }
    public int nthUglyNumber(int n) {
        int count = 1;
        int i = 1;
        while(n > count){
            i++;
            if(check(i)){
                count++;
            }
            
        }
        return i;
    }

Approach DP
Time complexity : O(n)

class Solution {
    public int nthUglyNumber(int n) {
        int[] arr = new int[n+1];

        int i2;
        int i3;
        int i5;

        i2=i3=i5=1;
        arr[1] = 1;

        for(int i=2;i<=n;i++) {
            int i2UglyNum = arr[i2]*2;
            int i3UglyNum = arr[i3]*3;
            int i5UglyNum= arr[i5]*5;

            int min = Math.min(i2UglyNum, Math.min(i3UglyNum, i5UglyNum));
            arr[i] = min;

            if(min == i2UglyNum) i2++;

            if(min == i3UglyNum) i3++;

            if(min == i5UglyNum) i5++;
        }
        return arr[n];
    }
}

