Approach 1 : Using priorityQueue
Time complexity : O(n^2 logk)
Space complexity : O(n)

class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        int n = nums.length;
        
        for(int i=0;i<n;i++) {
            for(int j=i+1;j<n;j++) {
                pq.offer(Math.abs(nums[i]-nums[j]));

                if(pq.size() > k) {
                    pq.remove();
                }
            }
        }
        return pq.peek();
    }
}


Approach 2 : using frequency Array
Time complexity : O(n^2 + nlogn)
Space complexity : O(max)

class Solution {
    public int findMax(int[] nums) {
        int max = 0;

        for(int num : nums) {
            if(num > max){
                max = num;
            }
        }
        return max;
    }
    public int smallestDistancePair(int[] nums, int k) {
        int n = nums.length;

        int max = findMax(nums);

        int[] freq = new int[max+1];

        for(int i=0;i<n;i++) {
            for(int j=i+1;j<n;j++) {
                freq[Math.abs(nums[i] - nums[j])]++;
            }
        }

        for(int i=0;i<=freq.length;i++) {
            k -= freq[i];
            if(k <= 0) {
                return i;
            }
        }
        return -1;
    }
}

Approach 3 : using sliding window and binary search
Time complexity : O(nlogk + nlogn)
Space compkexity : O(1)

class Solution {
    public int slidingWindow(int[] nums, int dis) {
        int i = 0;
        int j = 1;
        int count = 0;
        while(j < nums.length){
            while(Math.abs(nums[j] - nums[i]) > dis){
                i++;
            }
            count += j-i;
            j++;
        }
        return count;
    }
    public int smallestDistancePair(int[] nums, int k) {
        int n = nums.length;
        Arrays.sort(nums);
        int l = 0;
        int r = nums[n-1]- nums[0];
        int result = 0;
        while(l <= r) {
            int mid = (l+r)/2;
            int count = slidingWindow(nums,mid);

            if(count < k){
                l = mid+1;
            }else{
                result = mid;
                r = mid-1;
            }
        }
        return result;
    }
}
