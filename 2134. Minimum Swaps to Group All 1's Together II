Time complexity : O(n)
Space complexity : O(n)

class Solution {
    public int minSwaps(int[] nums) {
        int tOnes = 0;
        for(int num : nums) {
            if(num == 1)
                tOnes++;
        }
        int n = nums.length;
        int[] arr = new int[2*n];
        for(int i=0;i<2*n;i++) {
            arr[i] = nums[i%n];
        }

        int i = 0;
        int j = 0;
        int currOnes = 0;
        int swaps = Integer.MAX_VALUE;

        while(i < arr.length) {
            if(arr[i] == 1) 
                currOnes++;
            
            while(i-j+1 > tOnes) {
                if(arr[j] == 1)
                    currOnes--;
                j++;
            }

            if(i-j+1 == tOnes) {
                swaps = Math.min(swaps, tOnes-currOnes);
            }
            i++;
        }
        return swaps;
    }
}
