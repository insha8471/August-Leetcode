Approach : recursion  + memo
Time complexity : O(n^2)

class Solution {
    int[][] t;
    public int helper(int l, int r, String s) {
        if(l == r) {
            return 1;
        }

        if(l > r){
            return 0;
        }

        if(t[l][r] != -1){
            return t[l][r];
        }

        int i = l+1;
        while(i <= r && s.charAt(i) == s.charAt(l)) i++;

        if(i == r+1) return 1;

        int ans = 1 + helper(i,r,s);

        int res = Integer.MAX_VALUE;
        for(int j=i;j<=r;j++) {
            if(s.charAt(j) == s.charAt(l)){
                int ans1 = helper(i,j-1,s) + helper(j,r,s);
                res = Math.min(res, ans1);
            }
        }

        return t[l][r] = Math.min(ans, res);
    }
    public int strangePrinter(String s) {
        int n = s.length();
        t = new int[n+1][n+1];

        for(int[] arr : t){
            Arrays.fill(arr,-1);
        }
        return helper(0,n-1,s);
    }
}
