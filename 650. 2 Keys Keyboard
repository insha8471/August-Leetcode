Approach : Recursion
Time complexity : O(2^n)


class Solution {
    public int helper(int currA, int clipB, int n){
        if(currA == n){
            return 1;
        }

        int paste += 1+helper(currA+clipB, clipB, n);

        int copy += 1+helper(currA, currA, n);

        return Math.min(paste, copy);
    }
    public int minSteps(int n) {
        return helper(1,1,n);
    }
}

Approach  : Recursion + Memoization
Time complexity : O(n^2)
class Solution {
    int[][] t;
    public int helper(int currA, int clipB, int n){
        if(currA == n){
            return 0;
        }

        if(currA > n){
            return 10000;
        }

        if(t[currA][clipB] != -1){
            return t[currA][clipB];
        }
        int paste = 1+helper(currA+clipB, clipB, n);

        int copy = Integer.MAX_VALUE;
        if(currA != clipB)
            copy = 1+helper(currA, currA, n);

        return t[currA][clipB] = Math.min(paste, copy);
    }
    public int minSteps(int n) {
        t = new int[n][n];

        for(int[] arr : t){
            Arrays.fill(arr,-1);
        }
        if(n == 1) return 0;
        return 1+helper(1,1,n);
    }
}
