Time complexity : O(n*m)
Space complexity : O(1)

class Solution {
    public boolean isMagicSquares(int row,int col, int[][] grid) {
        HashSet<Integer> set = new HashSet<>();

        for(int i=0;i<3;i++) {
            for(int j=0;j<3;j++) {
                if(grid[i+row][j+col] < 1 || grid[i+row][j+col] > 9 || set.contains(grid[i+row][j+col])) {
                    return false;
                }else {
                    set.add(grid[i+row][j+col]);
                }
            }
        }

        int sum = grid[row][col] + grid[row][col+1] + grid[row][col+2];
        //check row sum
        int rowSum = 0;
        int colSum = 0;
        for(int i=0;i<3;i++) {
            if(grid[i+row][col] + grid[i+row][col+1] + grid[i+row][col+2] != sum) {
                return false;
            }

            if((grid[row][i+col] + grid[row+1][i+col] + grid[row+2][col+i]) != sum) {
                return false;
            }
        }
        

        if((grid[row][col] + grid[row+1][col+1] + grid[row+2][col+2]) != sum) {
            return false;
        }

        if((grid[row][col+2] + grid[row+1][col+1] + grid[row+2][col]) != sum) {
            return false;
        }


        return true;
    }
    public int numMagicSquaresInside(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int count = 0;

        for(int r=0;r<=n-3;r++) {
            for(int c=0;c<=m-3;c++) {
                if(isMagicSquares(r,c,grid)){
                    count++;
                }
            }
        }
        return count;
    }
}
