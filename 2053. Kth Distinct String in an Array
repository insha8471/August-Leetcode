Approach : Brute Force
Time complexity : O(n^2)
Space complexity : O(1)

class Solution {
    public int freq(String[] arr, String findStr) {
        int count = 0;
        for(String s : arr) {
            if(s.equals(findStr)) {
                count++;
            }
            if(count > 1){
                return count;
            }
        }
        return count;
    }
    public String kthDistinct(String[] arr, int k) {
        int count = 0;

        for(String s : arr) {
            if(freq(arr, s) == 1) {
                count++;
            }
            if(count == k) {
                return s;
            }
        }
        return "";
    }
}

Approach2 : using hashmap

Time complexity : O(n)
Space complexity : O(n)
class Solution {
    public String kthDistinct(String[] arr, int k) {
        HashMap<String, Integer> mp = new HashMap<>();

        for(String s : arr){
            mp.put(s, mp.getOrDefault(s,0)+1);
        }

        int count = 0;
        for(String s : arr) {
            if(mp.get(s) == 1) {
                count++;
                if(count==k) {
                    return s;
                }
            }
        }
        return "";
    }
}
